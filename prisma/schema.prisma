// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enum per i ruoli utente
enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

// Modello per gli utenti (sincronizzato con Supabase)
model User {
  id            String   @id // ID da Supabase
  email         String   @unique
  fullName      String?
  role          UserRole @default(CUSTOMER)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt   DateTime?
  
  // Relazioni
  bookings      Booking[]
  cartItems     CartItem[]
  
  @@map("users")
}

// Modello per i servizi prenotabili (ad esempio servizi del pet shop)
model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  duration    Int      // durata in minuti
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relazione con le prenotazioni
  bookings    Booking[]
  
  // Relazione con gli elementi del carrello
  cartItems   CartItem[]
}

// Modello per le prenotazioni
model Booking {
  id          Int      @id @default(autoincrement())
  userId      String   // ðŸ”— Collegamento all'ID utente Supabase
  customerName String
  customerEmail String
  petName     String
  petType     String   // cane, gatto, ecc.
  serviceId   Int
  bookingDate DateTime
  bookingTime String   // orario della prenotazione (formato: "HH:MM")
  status      String   @default("pending") // pending, confirmed, completed, cancelled
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relazioni
  user        User?    @relation(fields: [userId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])
  
  @@map("bookings")
}

// Modello per gli elementi del carrello
model CartItem {
  id         Int      @id @default(autoincrement())
  userId     String   // ðŸ”— Collegamento all'ID utente Supabase (rinominato da sessionId)
  serviceId  Int
  petName    String
  petType    String
  bookingDate DateTime
  bookingTime String
  customerName String?
  customerEmail String?
  createdAt  DateTime @default(now())
  
  // Relazioni
  user       User?    @relation(fields: [userId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
  
  @@map("cart_items")
}
